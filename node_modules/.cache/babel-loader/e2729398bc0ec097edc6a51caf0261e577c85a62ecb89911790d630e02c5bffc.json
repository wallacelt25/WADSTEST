{"ast":null,"code":"// src/api/chatService.js - API service for chat functionality\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n/**\n * Send a message to the AI chat service\n * @param {string} message - The message to send\n * @param {string} sessionId - Unique identifier for the chat session\n * @returns {Promise<Object>} - Response from the server\n */\nexport const sendChatMessage = async (message, sessionId = 'default') => {\n  try {\n    const response = await fetch(`${API_URL}/chat`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        message,\n        sessionId\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || 'Failed to send message');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error sending chat message:', error);\n    throw error;\n  }\n};\n\n/**\n * Clear the chat history for a session\n * @param {string} sessionId - Unique identifier for the chat session\n * @returns {Promise<Object>} - Response from the server\n */\nexport const clearChatHistory = async (sessionId = 'default') => {\n  try {\n    const response = await fetch(`${API_URL}/chat/clear`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        sessionId\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || 'Failed to clear chat history');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error clearing chat history:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","sendChatMessage","message","sessionId","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","Error","error","console","clearChatHistory"],"sources":["C:/Users/walla/Documents/WADSFINALPROJECT/src/api/chatService.js"],"sourcesContent":["// src/api/chatService.js - API service for chat functionality\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n/**\n * Send a message to the AI chat service\n * @param {string} message - The message to send\n * @param {string} sessionId - Unique identifier for the chat session\n * @returns {Promise<Object>} - Response from the server\n */\nexport const sendChatMessage = async (message, sessionId = 'default') => {\n  try {\n    const response = await fetch(`${API_URL}/chat`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ message, sessionId }),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || 'Failed to send message');\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Error sending chat message:', error);\n    throw error;\n  }\n};\n\n/**\n * Clear the chat history for a session\n * @param {string} sessionId - Unique identifier for the chat session\n * @returns {Promise<Object>} - Response from the server\n */\nexport const clearChatHistory = async (sessionId = 'default') => {\n  try {\n    const response = await fetch(`${API_URL}/chat/clear`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ sessionId }),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || 'Failed to clear chat history');\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Error clearing chat history:', error);\n    throw error;\n  }\n};"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;;AAE5E;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAG,MAAAA,CAAOC,OAAO,EAAEC,SAAS,GAAG,SAAS,KAAK;EACvE,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,OAAO,OAAO,EAAE;MAC9CS,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAER,OAAO;QAAEC;MAAU,CAAC;IAC7C,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,KAAK,IAAI,wBAAwB,CAAC;IAC9D;IAEA,OAAO,MAAMX,QAAQ,CAACS,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,gBAAgB,GAAG,MAAAA,CAAOd,SAAS,GAAG,SAAS,KAAK;EAC/D,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,OAAO,aAAa,EAAE;MACpDS,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEP;MAAU,CAAC;IACpC,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,KAAK,IAAI,8BAA8B,CAAC;IACpE;IAEA,OAAO,MAAMX,QAAQ,CAACS,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}