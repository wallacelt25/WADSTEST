{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\walla\\\\Documents\\\\WADSFINALPROJECT\\\\src\\\\components\\\\SupportTickets\\\\ChatWidget.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport \"./ChatWidget.css\";\nimport PropTypes from \"prop-types\";\nimport { sendChatMessage, clearChatHistory } from \"../../api/chatService\";\n\n/**\n * ChatWidget component provides a floating chat interface for customer support\n * with AI integration\n * @component\n * @param {Object} props\n * @param {number} [props.maxMessageLength=500] - Maximum length of a message\n * @param {number} [props.maxMessages=50] - Maximum number of messages to keep in history\n * @param {function} [props.onSend] - Callback when a message is sent\n * @returns {React.ReactElement}\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function ChatWidget({\n  maxMessageLength = 500,\n  maxMessages = 50,\n  onSend\n}) {\n  _s();\n  const [isChatOpen, setIsChatOpen] = useState(false);\n  const [messages, setMessages] = useState([{\n    text: \"ðŸ‘‹ Hi! How can I help you with your Jellycat plush today?\",\n    sender: \"support\",\n    time: new Date().toLocaleTimeString()\n  }]);\n  const [currentMessage, setCurrentMessage] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [sessionId, setSessionId] = useState(`session_${Date.now()}`);\n  const messagesEndRef = useRef(null);\n\n  // Scroll to bottom of messages when new ones arrive\n  useEffect(() => {\n    if (isChatOpen && messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    }\n  }, [messages, isChatOpen]);\n  const toggleChat = () => {\n    setIsChatOpen(!isChatOpen);\n    if (!isChatOpen) {\n      setTimeout(() => {\n        var _document$getElementB, _messagesEndRef$curre;\n        (_document$getElementB = document.getElementById(\"chat-input\")) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.focus();\n        (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n          behavior: \"smooth\"\n        });\n      }, 300);\n    }\n  };\n  const validateMessage = message => {\n    if (!message.trim()) {\n      setError(\"Message cannot be empty\");\n      return false;\n    }\n    if (message.length > maxMessageLength) {\n      setError(`Message cannot exceed ${maxMessageLength} characters`);\n      return false;\n    }\n    return true;\n  };\n  const sendMessage = async () => {\n    if (!validateMessage(currentMessage) || isLoading) return;\n    setIsLoading(true);\n    setError(null);\n    try {\n      // Add user message to UI immediately\n      const userMessage = {\n        text: currentMessage,\n        sender: \"user\",\n        time: new Date().toLocaleTimeString()\n      };\n      setMessages(prev => {\n        // Limit the number of messages\n        const updatedMessages = [...prev, userMessage];\n        if (updatedMessages.length > maxMessages) {\n          return updatedMessages.slice(-maxMessages);\n        }\n        return updatedMessages;\n      });\n\n      // Clear input field\n      setCurrentMessage(\"\");\n\n      // Call custom onSend callback if provided\n      if (onSend) {\n        onSend(currentMessage);\n      }\n\n      // Call AI service\n      const response = await sendChatMessage(currentMessage, sessionId);\n\n      // Add AI response to UI\n      setMessages(prev => {\n        const aiMessage = {\n          text: response.message,\n          sender: \"support\",\n          time: new Date().toLocaleTimeString()\n        };\n        const updatedMessages = [...prev, aiMessage];\n        if (updatedMessages.length > maxMessages) {\n          return updatedMessages.slice(-maxMessages);\n        }\n        return updatedMessages;\n      });\n    } catch (err) {\n      console.error(\"Chat error:\", err);\n      setError(\"Failed to send message. Please try again.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleKeyPress = event => {\n    if (event.key === \"Enter\" && !event.shiftKey) {\n      event.preventDefault();\n      sendMessage();\n    }\n  };\n  const resetChat = async () => {\n    try {\n      setIsLoading(true);\n      await clearChatHistory(sessionId);\n\n      // Generate a new session ID\n      const newSessionId = `session_${Date.now()}`;\n      setSessionId(newSessionId);\n\n      // Reset messages\n      setMessages([{\n        text: \"ðŸ‘‹ Chat history cleared. How can I help you today?\",\n        sender: \"support\",\n        time: new Date().toLocaleTimeString()\n      }]);\n    } catch (err) {\n      console.error(\"Failed to reset chat:\", err);\n      setError(\"Failed to reset chat. Please try again.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-widget\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"chat-toggle-button\",\n        \"aria-label\": \"Toggle live chat\",\n        \"aria-expanded\": isChatOpen,\n        onClick: toggleChat,\n        children: \"\\uD83D\\uDCAC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), messages.length > 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"notification-badge\",\n        children: messages.length - 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `chat-window ${isChatOpen ? \"open\" : \"\"}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-title\",\n          children: \"AI Support Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"reset-button\",\n            \"aria-label\": \"Reset chat\",\n            onClick: resetChat,\n            disabled: isLoading,\n            children: \"\\uD83D\\uDD04\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"close-button\",\n            \"aria-label\": \"Close chat\",\n            onClick: toggleChat,\n            children: \"\\u2715\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages-container\",\n        children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${message.sender === \"user\" ? \"user\" : \"support\"}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-content\",\n            children: message.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-time\",\n            children: message.time\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input-container\",\n        children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-message\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"chat-input\",\n          type: \"text\",\n          placeholder: \"Type your message...\",\n          \"aria-label\": \"Chat message\",\n          value: currentMessage,\n          maxLength: maxMessageLength,\n          disabled: isLoading,\n          onChange: e => setCurrentMessage(e.target.value),\n          onKeyDown: handleKeyPress,\n          className: \"chat-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"send-button\",\n          \"aria-label\": \"Send message\",\n          disabled: isLoading,\n          onClick: sendMessage,\n          children: isLoading ? \"...\" : \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatWidget, \"ZSY/Y2W3OLD/EICaKW9PEQL8tyA=\");\n_c = ChatWidget;\nChatWidget.propTypes = {\n  maxMessageLength: PropTypes.number,\n  maxMessages: PropTypes.number,\n  onSend: PropTypes.func\n};\nvar _c;\n$RefreshReg$(_c, \"ChatWidget\");","map":{"version":3,"names":["React","useState","useRef","useEffect","PropTypes","sendChatMessage","clearChatHistory","jsxDEV","_jsxDEV","ChatWidget","maxMessageLength","maxMessages","onSend","_s","isChatOpen","setIsChatOpen","messages","setMessages","text","sender","time","Date","toLocaleTimeString","currentMessage","setCurrentMessage","isLoading","setIsLoading","error","setError","sessionId","setSessionId","now","messagesEndRef","current","scrollIntoView","behavior","toggleChat","setTimeout","_document$getElementB","_messagesEndRef$curre","document","getElementById","focus","validateMessage","message","trim","length","sendMessage","userMessage","prev","updatedMessages","slice","response","aiMessage","err","console","handleKeyPress","event","key","shiftKey","preventDefault","resetChat","newSessionId","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","disabled","map","index","ref","id","type","placeholder","value","maxLength","onChange","e","target","onKeyDown","_c","propTypes","number","func","$RefreshReg$"],"sources":["C:/Users/walla/Documents/WADSFINALPROJECT/src/components/SupportTickets/ChatWidget.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport \"./ChatWidget.css\";\nimport PropTypes from \"prop-types\";\nimport { sendChatMessage, clearChatHistory } from \"../../api/chatService\";\n\n/**\n * ChatWidget component provides a floating chat interface for customer support\n * with AI integration\n * @component\n * @param {Object} props\n * @param {number} [props.maxMessageLength=500] - Maximum length of a message\n * @param {number} [props.maxMessages=50] - Maximum number of messages to keep in history\n * @param {function} [props.onSend] - Callback when a message is sent\n * @returns {React.ReactElement}\n */\nexport function ChatWidget({\n  maxMessageLength = 500,\n  maxMessages = 50,\n  onSend,\n}) {\n  const [isChatOpen, setIsChatOpen] = useState(false);\n  const [messages, setMessages] = useState([\n    {\n      text: \"ðŸ‘‹ Hi! How can I help you with your Jellycat plush today?\",\n      sender: \"support\",\n      time: new Date().toLocaleTimeString(),\n    },\n  ]);\n  const [currentMessage, setCurrentMessage] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [sessionId, setSessionId] = useState(`session_${Date.now()}`);\n  const messagesEndRef = useRef(null);\n\n  // Scroll to bottom of messages when new ones arrive\n  useEffect(() => {\n    if (isChatOpen && messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\n    }\n  }, [messages, isChatOpen]);\n\n  const toggleChat = () => {\n    setIsChatOpen(!isChatOpen);\n    if (!isChatOpen) {\n      setTimeout(() => {\n        document.getElementById(\"chat-input\")?.focus();\n        messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n      }, 300);\n    }\n  };\n\n  const validateMessage = (message) => {\n    if (!message.trim()) {\n      setError(\"Message cannot be empty\");\n      return false;\n    }\n    if (message.length > maxMessageLength) {\n      setError(`Message cannot exceed ${maxMessageLength} characters`);\n      return false;\n    }\n    return true;\n  };\n\n  const sendMessage = async () => {\n    if (!validateMessage(currentMessage) || isLoading) return;\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      // Add user message to UI immediately\n      const userMessage = {\n        text: currentMessage,\n        sender: \"user\",\n        time: new Date().toLocaleTimeString(),\n      };\n\n      setMessages((prev) => {\n        // Limit the number of messages\n        const updatedMessages = [...prev, userMessage];\n        if (updatedMessages.length > maxMessages) {\n          return updatedMessages.slice(-maxMessages);\n        }\n        return updatedMessages;\n      });\n      \n      // Clear input field\n      setCurrentMessage(\"\");\n\n      // Call custom onSend callback if provided\n      if (onSend) {\n        onSend(currentMessage);\n      }\n\n      // Call AI service\n      const response = await sendChatMessage(currentMessage, sessionId);\n\n      // Add AI response to UI\n      setMessages((prev) => {\n        const aiMessage = {\n          text: response.message,\n          sender: \"support\",\n          time: new Date().toLocaleTimeString(),\n        };\n\n        const updatedMessages = [...prev, aiMessage];\n        if (updatedMessages.length > maxMessages) {\n          return updatedMessages.slice(-maxMessages);\n        }\n        return updatedMessages;\n      });\n    } catch (err) {\n      console.error(\"Chat error:\", err);\n      setError(\"Failed to send message. Please try again.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleKeyPress = (event) => {\n    if (event.key === \"Enter\" && !event.shiftKey) {\n      event.preventDefault();\n      sendMessage();\n    }\n  };\n\n  const resetChat = async () => {\n    try {\n      setIsLoading(true);\n      await clearChatHistory(sessionId);\n      \n      // Generate a new session ID\n      const newSessionId = `session_${Date.now()}`;\n      setSessionId(newSessionId);\n      \n      // Reset messages\n      setMessages([\n        {\n          text: \"ðŸ‘‹ Chat history cleared. How can I help you today?\",\n          sender: \"support\",\n          time: new Date().toLocaleTimeString(),\n        },\n      ]);\n    } catch (err) {\n      console.error(\"Failed to reset chat:\", err);\n      setError(\"Failed to reset chat. Please try again.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"chat-widget\">\n      <div className=\"chat-button-container\">\n        <button\n          className=\"chat-toggle-button\"\n          aria-label=\"Toggle live chat\"\n          aria-expanded={isChatOpen}\n          onClick={toggleChat}\n        >\n          ðŸ’¬\n        </button>\n        {messages.length > 1 && <div className=\"notification-badge\">{messages.length - 1}</div>}\n      </div>\n\n      <div className={`chat-window ${isChatOpen ? \"open\" : \"\"}`}>\n        <div className=\"chat-header\">\n          <div className=\"chat-title\">AI Support Chat</div>\n          <div className=\"chat-actions\">\n            <button\n              className=\"reset-button\"\n              aria-label=\"Reset chat\"\n              onClick={resetChat}\n              disabled={isLoading}\n            >\n              ðŸ”„\n            </button>\n            <button\n              className=\"close-button\"\n              aria-label=\"Close chat\"\n              onClick={toggleChat}\n            >\n              âœ•\n            </button>\n          </div>\n        </div>\n\n        <div className=\"messages-container\">\n          {messages.map((message, index) => (\n            <div\n              key={index}\n              className={`message ${message.sender === \"user\" ? \"user\" : \"support\"}`}\n            >\n              <div className=\"message-content\">{message.text}</div>\n              <div className=\"message-time\">{message.time}</div>\n            </div>\n          ))}\n          <div ref={messagesEndRef} />\n        </div>\n\n        <div className=\"chat-input-container\">\n          {error && <div className=\"error-message\">{error}</div>}\n          <input\n            id=\"chat-input\"\n            type=\"text\"\n            placeholder=\"Type your message...\"\n            aria-label=\"Chat message\"\n            value={currentMessage}\n            maxLength={maxMessageLength}\n            disabled={isLoading}\n            onChange={(e) => setCurrentMessage(e.target.value)}\n            onKeyDown={handleKeyPress}\n            className=\"chat-input\"\n          />\n          <button\n            className=\"send-button\"\n            aria-label=\"Send message\"\n            disabled={isLoading}\n            onClick={sendMessage}\n          >\n            {isLoading ? \"...\" : \"Send\"}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nChatWidget.propTypes = {\n  maxMessageLength: PropTypes.number,\n  maxMessages: PropTypes.number,\n  onSend: PropTypes.func,\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}